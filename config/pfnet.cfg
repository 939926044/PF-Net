[dataset]
# tensor type (float or double)
tensor_type = float
task_type = seg

# Set the following parameters according to your own case
root_dir  = data/lung/NHP_Maryland/experiment/data_crop
train_csv = config/data_train.csv
valid_csv = config/data_valid.csv
test_csv  = config/data_test.csv

train_batch_size = 2
load_pixelwise_weight = False

# modality number = 1, as only CT images are used
modal_num = 1

# data transforms
train_transform = [Pad, RandomCrop, RandomFlip, ChannelWiseThresholdWithNormalize, LabelToProbability]
test_transform  = [Pad, ChannelWiseThresholdWithNormalize]

ChannelWiseThresholdWithNormalize_threshold_lower = [-1400]
ChannelWiseThresholdWithNormalize_threshold_upper = [100]
ChannelWiseThresholdWithNormalize_mean_std_mode   = False
ChannelWiseThresholdWithNormalize_inverse         = False

Pad_output_size = [1, 32, 32]
Pad_ceil_mode   = True
Pad_inverse     = True

RandomCrop_output_size      = [48, 192, 192]
RandomCrop_foreground_focus = False
RandomCrop_foreground_ratio = None
RandomCrop_mask_label       = None
RandomCrop_inverse          = False

RandomFlip_flip_depth  = False
RandomFlip_flip_height = True
RandomFlip_flip_width  = True
RandomFlip_inverse     = False 

LabelToProbability_class_num = 2
LabelToProbability_inverse   = False

[network]
# this section gives parameters for network
# the keys may be different for different networks

# type of network
net_type = PFNet

# number of class, required for segmentation task
class_num = 2

in_chns       = 1
feature_chns  = [16, 32, 64, 128, 256]
conv_dims     = [2, 2, 3, 3, 3]
dropout       = [0,  0,  0.3, 0.4, 0.5]
bilinear      = True

[training]
# list of gpus
gpus       = [1]

loss_type     = MultiScaleDiceLoss
MultiScaleDiceLoss_Enable_Pixel_Weight = False
MultiScaleDiceLoss_Enable_Class_Weight = False
MultiScaleDiceLoss_Scale_Weight = [1, 0.6, 0.4, 0.2, 0.1]

# for optimizers
optimizer     = Adam
learning_rate = 1e-3
momentum      = 0.9
weight_decay  = 1e-5

# for lr schedular (MultiStepLR)
lr_gamma      = 0.5
lr_milestones = [10000, 20000, 30000, 40000, 50000]

ckpt_save_dir    = model/pfnet
ckpt_save_prefix = pfnet

# start iter
iter_start = 0
iter_max   = 50000
iter_valid = 200
iter_save  = 5000

[testing]
# list of gpus
gpus       = [0]


# checkpoint mode can be [0-latest, 1-best, 2-specified]
# if ckpt_mode = 2, set ckpt_name here
ckpt_mode         = 1
ckpt_name         = model/pfnet/pfnet_41900.pt
output_dir        = result/pf_net
output_num        = 1
evaluation_mode   = True
test_time_dropout = False
save_probability  = False

# use test time augmentation
tta_mode = 0

sliding_window_enable = True
sliding_window_size   = [48, None, None]
sliding_window_stride = [48, None, None]